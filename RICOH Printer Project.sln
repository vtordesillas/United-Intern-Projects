using System;
using System.Collections.Generic;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.pdf.parser;
using System.IO;
using System.Diagnostics;

namespace RICOH_Printer_Project 
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Please make sure manifest file is saved");
            Console.WriteLine("as PDF in desktop and named \"ManifestToSplit\" ");
            Console.WriteLine("Press Enter");
            Console.ReadLine();
            string sourcePdfPath = GetSourcePath();
            Console.WriteLine("Source is: " + sourcePdfPath);
            string desitnationDirectory = CreateDestinationDirectory();
            Console.WriteLine("Destination Directory is " + desitnationDirectory);
            List<int> startPages = GetStartPage();
            List<int> endPages = GetEndPage(startPages);

            //ACTUAL SPLITTING
            List<string> pdfPaths = new List<string>();
            for (var i = 0; i < startPages.Count; i++)
            {
                int startPage = startPages[i];
                int endPage = endPages[i];
                Console.WriteLine("Start Page is: {0}", startPage);
                Console.WriteLine("End Page is: {0}", endPage);
                Console.WriteLine("----------------------");
                string outputPdfPath = desitnationDirectory + "Manifest Part " + i + @".pdf";
                SplitPDF(sourcePdfPath, outputPdfPath, startPage, endPage);
            //ADD EACH PATH TO LIST
                pdfPaths.Add(outputPdfPath);
            }
            Console.WriteLine("----------------------");
            Console.WriteLine("Splitting finalized. Press Enter");
            Console.ReadLine();
            Console.WriteLine("Starting Printing Process");
            foreach (string item in pdfPaths)
            {
                Console.WriteLine("Printing path {0}", item);
                PrintPDF(item);

            }
        }
        static public string GetSourcePath()
        {
            string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + @"\";
            string fileName = "DriverManifest.pdf";
            string result = desktopPath + fileName;
            return result;
        }
        static public string CreateDestinationDirectory()
        {
            string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string directoryName = "Split Manifest";
            string outputDirectory = desktopPath + @"\" + directoryName + @"\";
            if (!Directory.Exists(outputDirectory))
            {
                Directory.CreateDirectory(outputDirectory);
            }
            else
            {
                Directory.Delete(outputDirectory, true);
                Directory.CreateDirectory(outputDirectory);
            }
            return outputDirectory;
        }
        static public List<int> GetStartPage()
        {
            string sourcePdfPath = GetSourcePath();
            string searchParameter = "Total ";
            List<int> startPages = ReadPdfFile(sourcePdfPath, searchParameter);
            return startPages;
        }
        static public List<int> GetEndPage(List<int> startPages)
        {
            List<int> endPages = new List<int>();
            foreach (int item in startPages)
            {
                int endPageTmp = item - 1;
                endPages.Add(endPageTmp);   
            }
            endPages.Remove(0);
            string sourcePdfPath = GetSourcePath();
            PdfReader pdf = new PdfReader(sourcePdfPath);
            int lastPage = pdf.NumberOfPages;
            endPages.Add(lastPage);
            return endPages;

        }
        static List<int> ReadPdfFile(string sourcePdfPath, string searchParameter)
        {
            List<int> pages = new List<int>();
            if (File.Exists(sourcePdfPath))
            {
                PdfReader pdfReader = new PdfReader(sourcePdfPath);
                for (int page = 1; page <= pdfReader.NumberOfPages; page++)
                {
                    ITextExtractionStrategy strategy = new SimpleTextExtractionStrategy();

                    string currentPageText = PdfTextExtractor.GetTextFromPage(pdfReader, page, strategy);
                    if (currentPageText.Contains(searchParameter))
                    {
                        pages.Add(page);
                    }
                }
                pdfReader.Close();
            }
            return pages;
        }
        static void SplitPDF(string sourcePdfPath, string outputPdfPath, int startPage, int endPage)
        {
            PdfReader reader = null;
            Document sourceDocument = null;
            PdfCopy pdfCopyProvider = null;
            PdfImportedPage importedPage = null;

            try
            {
                reader = new PdfReader(sourcePdfPath);
                sourceDocument = new Document(reader.GetPageSizeWithRotation(startPage));
                pdfCopyProvider = new PdfCopy(sourceDocument,
                    new FileStream(outputPdfPath, FileMode.Create));
                sourceDocument.Open();
                for (int i = startPage; i <= endPage; i++)
                {
                    importedPage = pdfCopyProvider.GetImportedPage(reader, i);
                    pdfCopyProvider.AddPage(importedPage);
                }
                sourceDocument.Close();
                reader.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        static void PrintPDF(string splitPdfPath)
        {
            var openPdf = new ProcessStartInfo(splitPdfPath);
            openPdf.UseShellExecute = true;
            openPdf.Verb = "print";
            var process = Process.Start(openPdf);
        }
    }
}
