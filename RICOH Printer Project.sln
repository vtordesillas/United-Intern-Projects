using System;
using System.Collections.Generic;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.pdf.parser;
using System.IO;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;

namespace RICOH_Printer_Project
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("------------------------------------------------------------------------------------------");
            string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string inputfolderPath = desktopPath + @"\Manifest Source";
            string outputfolderPath = desktopPath + @"\Split Manifests";
            Console.WriteLine("Searching for Directories");
            Console.WriteLine("------------------------------------------------------------------------------------------");
            if (Directory.Exists(inputfolderPath))
            {
                Console.WriteLine("Directory found!");
            }
            else
            {
                Console.WriteLine("Directory not found. Creating new directory 'Split Manifests' in Desktop.");
                string sourceDirectory = CreateDestinationDirectory("Manifest Source");
            }
            string desitnationDirectory = CreateDestinationDirectory("Split Manifests");
            Console.WriteLine("Please make sure all manifest files are saved");
            Console.WriteLine("in  PDF format in the \"Manifest Source\" Directory");
            Console.WriteLine("Press Enter");
            Console.ReadLine();
            string[] pathsToSplit = Directory.GetFiles(inputfolderPath);

            foreach (string item in pathsToSplit)
            {
                Console.WriteLine("Manifest to split: {0}", item);
            }
            Console.WriteLine("------------------------------------------------------------------------------------------");
            List<string> pdfPaths = new List<string>();
            foreach (string pdf in pathsToSplit)
            {
                Console.WriteLine("Source is: " + pdf);
                Console.WriteLine("Destination Directory is " + desitnationDirectory);
                List<int> startPages = GetStartPage(pdf);
                List<int> endPages = GetEndPage(startPages, pdf);

                //ACTUAL SPLITTING
                for (int i = 0; i < startPages.Count; i++)
                {
                    string shortName = System.IO.Path.GetFileNameWithoutExtension(pdf);
                    int j = i + 1;
                    int startPage = startPages[i];
                    int endPage = endPages[i];
                    Console.WriteLine("Start Page is: {0}", startPage);
                    Console.WriteLine("End Page is: {0}", endPage);
                    Console.WriteLine("----------------------");
                    string outputPdfPath = desitnationDirectory + shortName + " part " + j + @".pdf";
                    SplitPDF(pdf, outputPdfPath, startPage, endPage);
                    //ADD EACH PATH TO LIST
                    pdfPaths.Add(outputPdfPath);
                }
                startPages.Clear();
                endPages.Clear();
                Console.WriteLine("----------------------");
                Console.WriteLine("Splitting finalized.");

            }
            Console.WriteLine("------------------------------------------------------------------------------------------");
            Console.WriteLine("Starting Printing Process");
            Console.WriteLine("------------------------------------------------------------------------------------------");
            foreach (string item in pdfPaths)
            {
                int i = 1;
                Console.WriteLine(item + item[i]);
                i++;
            }
            Console.ReadLine();
            
            string strIP = "10.100.20.79";
            int portNum = 9100;
            IPAddress printerIP = IPAddress.Parse(strIP);
                
           foreach (string item in pdfPaths)
            {
                Console.WriteLine("Printing path {0}", item);
                PrintData(item, printerIP, portNum);

            }
            
            Console.WriteLine("Delete Directories?");
            Console.WriteLine("Y for yes or N for no");
            string tmpChar = Console.ReadLine();
            switch (tmpChar)
            {
                case "y":
                Directory.Delete(inputfolderPath, true);
                Directory.Delete(outputfolderPath, true);
                    break;
                default:
                    break;
            }

        }

        static public string CreateDestinationDirectory(string dirName)
        {
            string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string directoryName = dirName;
            string outputDirectory = desktopPath + @"\" + directoryName + @"\";
            if (!Directory.Exists(outputDirectory))
            {
                Directory.CreateDirectory(outputDirectory);
            }
            else
            {
                Directory.Delete(outputDirectory, true);
                Directory.CreateDirectory(outputDirectory);
            }
            return outputDirectory;
        }
        static public List<int> GetStartPage(string source)
        {
            string sourcePdfPath = source;
            string searchParameter = "Total ";
            List<int> startPages = ReadPdfFile(sourcePdfPath, searchParameter);
            return startPages;
        }
        static public List<int> GetEndPage(List<int> startPages, string source)
        {
            List<int> endPages = new List<int>();
            foreach (int item in startPages)
            {
                int endPageTmp = item - 1;
                endPages.Add(endPageTmp);
            }
            endPages.Remove(0);
            string sourcePdfPath = source;
            PdfReader pdf = new PdfReader(sourcePdfPath);
            int lastPage = pdf.NumberOfPages;
            endPages.Add(lastPage);
            return endPages;

        }
        static List<int> ReadPdfFile(string sourcePdfPath, string searchParameter)
        {
            List<int> pages = new List<int>();
            if (File.Exists(sourcePdfPath))
            {
                PdfReader pdfReader = new PdfReader(sourcePdfPath);
                for (int page = 1; page <= pdfReader.NumberOfPages; page++)
                {
                    ITextExtractionStrategy strategy = new SimpleTextExtractionStrategy();

                    string currentPageText = PdfTextExtractor.GetTextFromPage(pdfReader, page, strategy);
                    if (currentPageText.Contains(searchParameter))
                    {
                        pages.Add(page);
                    }
                }
                pdfReader.Close();
            }
            return pages;
        }
        static void SplitPDF(string sourcePdfPath, string outputPdfPath, int startPage, int endPage)
        {
            PdfReader reader = null;
            Document sourceDocument = null;
            PdfCopy pdfCopyProvider = null;
            PdfImportedPage importedPage = null;

            try
            {
                reader = new PdfReader(sourcePdfPath);
                sourceDocument = new Document(reader.GetPageSizeWithRotation(startPage));
                pdfCopyProvider = new PdfCopy(sourceDocument,
                    new FileStream(outputPdfPath, FileMode.Create));
                sourceDocument.Open();
                for (int i = startPage; i <= endPage; i++)
                {
                    importedPage = pdfCopyProvider.GetImportedPage(reader, i);
                    pdfCopyProvider.AddPage(importedPage);
                }
                sourceDocument.Close();
                reader.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
        static void PrintPDF(string splitPdfPath)
        {
            var openPdf = new ProcessStartInfo(splitPdfPath);
            openPdf.UseShellExecute = true;
            openPdf.Verb = "print";
            var process = Process.Start(openPdf);

        }
        static void PrintData(string fileName, IPAddress printerIP, int printerPort)
        {

            EndPoint ep = new IPEndPoint(printerIP, printerPort);

            try
            {
                using (Socket sock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))
                {
                    sock.Connect(ep);
                    NetworkStream ns = new NetworkStream(sock);

                    byte[] toSend = File.ReadAllBytes(fileName);

                    ns.Write(toSend, 0, toSend.Length);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }


        }


    }
}
